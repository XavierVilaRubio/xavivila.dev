---
import { t, setDefaultNamespace } from 'i18next'
import { localizePath } from 'astro-i18next'
import LinkButton from '../../../Common/LinkButton/LinkButton.astro'
import Icon from 'astro-icon'
import LanguageTag, { LanguageTagProps } from './LanguageTag.astro'
setDefaultNamespace('work')

export interface ProjectProps {
  id: number
  name: string
  languages: Array<string>
  previewLink: string
  githubLink: string
  image: string
  slug: string
}

const {
  project: { id, name, languages, previewLink, githubLink, image, slug },
} = Astro.props

const projectContent = t<
  {
    name: string
    content: string
  }[]
>(`projects.${slug}.modal`, {
  returnObjects: true,
} as const) as Array<{
  name: string
  content: string
}>
---

<script>
  const cards = document.querySelectorAll('article.card')
  cards.forEach((card) => {
    const link = card.querySelector('a')
    if (link) {
      const url = link.getAttribute('href')
      card.addEventListener('click', (e) => {
        if (url) {
          location.href = url
          e.preventDefault
        }
      })
    }
  })
</script>

<article class="card reorder" style={`--order: ${id}`}>
  <h3><a href={localizePath(`/projects/${slug}`)}>{name}</a></h3>
  <img class="image" src={image} alt="" />
  <div class="languages">
    {
      languages.map((language: LanguageTagProps) => (
        <LanguageTag language={language} />
      ))
    }
  </div>
  <p class="description">{t(`projects.${slug}.description`)}</p>
</article>

<dialog class="modal" id={`modal-${slug}`}>
  <button class="button-close" id={`button-close-${slug}`}
    ><Icon class="icon" name="eva:close-circle-outline" />
  </button>
  {
    projectContent &&
      projectContent.length > 0 &&
      Array.apply(null, Array(projectContent.length))
        .map(() => {})
        .map((_, index) => (
          <div class="modal-section">
            <h3>{t(`projects.${slug}.modal.${index}.name`)}</h3>
            <p>{t(`projects.${slug}.modal.${index}.content`)}</p>
            {t([`projects.${slug}.modal.${index}.image`, '']) ? (
              <img
                src={t(`projects.${slug}.modal.${index}.image`)}
                alt=""
                srcset=""
              />
            ) : (
              ''
            )}
          </div>
        ))
  }
  <div class="modal-links">
    <LinkButton
      href={previewLink}
      label="Preview"
      iconLeft="eva:eye-outline"
      target="_blank"
    />
    <LinkButton
      href={githubLink}
      label="Github repo"
      theme="secondary"
      iconLeft="eva:github-outline"
      target="_blank"
    />
  </div>
</dialog>

<style>
  .card {
    display: flex;
    flex-direction: column;
    margin-inline: auto;
    text-align: start;
    max-width: 100%;
    cursor: pointer;
    position: relative;
  }

  .card::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    opacity: 0;
    /* box-shadow: rgb(149 157 165 / 20%) 0px 8px 24px; */
    transition: opacity 0.2s ease-in-out;
  }

  .card:hover::after {
    opacity: 1;
  }

  .image {
    order: -1;
    /* aspect-ratio: 16/9; */
    max-width: 100%;
    border-radius: 0.5rem;
    max-height: 80%;
    box-shadow: rgb(149 157 165 / 20%) 0px 8px 24px;
  }

  h3 {
    margin-block-start: 0.75rem;
    font-weight: 900;
    font-size: 1.15rem;
  }

  .languages {
    margin-block-start: 0.5rem;
    display: flex;
    flex-direction: row;
    column-gap: 0.5rem;
    row-gap: 0.25rem;
    overflow-x: scroll;
  }

  .languages::-webkit-scrollbar {
    display: none;
  }

  .description {
    margin-block-start: 1rem;
    font-size: 1rem;
    color: rgba(var(--color-text-rgb), 0.8);
  }

  .links {
    margin-block-start: 1rem;
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
  }

  @media (min-width: 768px) {
    .links {
      font-size: 1rem;
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    .card {
      opacity: 0;
      transform: translateY(1rem);
      transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
      transition-delay: calc(200ms * var(--order));
    }

    .show {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (hover: hover) {
    .links {
      opacity: 0;
      transform: translateY(50%);
      transition: all 0.3s ease-in-out;
    }

    .card:hover .links {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>
